// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/durotimicodes/xanda_task_R3_D3/cmd/database/repository (interfaces: SpaceshipRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/durotimicodes/xanda_task_R3_D3/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSpaceshipRepository is a mock of SpaceshipRepository interface.
type MockSpaceshipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceshipRepositoryMockRecorder
}

// MockSpaceshipRepositoryMockRecorder is the mock recorder for MockSpaceshipRepository.
type MockSpaceshipRepositoryMockRecorder struct {
	mock *MockSpaceshipRepository
}

// NewMockSpaceshipRepository creates a new mock instance.
func NewMockSpaceshipRepository(ctrl *gomock.Controller) *MockSpaceshipRepository {
	mock := &MockSpaceshipRepository{ctrl: ctrl}
	mock.recorder = &MockSpaceshipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceshipRepository) EXPECT() *MockSpaceshipRepositoryMockRecorder {
	return m.recorder
}

// CreateSpaceship mocks base method.
func (m *MockSpaceshipRepository) CreateSpaceship(arg0 *models.Spaceship) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpaceship", arg0)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpaceship indicates an expected call of CreateSpaceship.
func (mr *MockSpaceshipRepositoryMockRecorder) CreateSpaceship(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpaceship", reflect.TypeOf((*MockSpaceshipRepository)(nil).CreateSpaceship), arg0)
}

// DeleteSpaceship mocks base method.
func (m *MockSpaceshipRepository) DeleteSpaceship(arg0 int) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpaceship", arg0)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSpaceship indicates an expected call of DeleteSpaceship.
func (mr *MockSpaceshipRepositoryMockRecorder) DeleteSpaceship(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpaceship", reflect.TypeOf((*MockSpaceshipRepository)(nil).DeleteSpaceship), arg0)
}

// FilterAllByClass mocks base method.
func (m *MockSpaceshipRepository) FilterAllByClass(arg0 string) ([]models.Spaceship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAllByClass", arg0)
	ret0, _ := ret[0].([]models.Spaceship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAllByClass indicates an expected call of FilterAllByClass.
func (mr *MockSpaceshipRepositoryMockRecorder) FilterAllByClass(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAllByClass", reflect.TypeOf((*MockSpaceshipRepository)(nil).FilterAllByClass), arg0)
}

// FilterAllByName mocks base method.
func (m *MockSpaceshipRepository) FilterAllByName(arg0 string) ([]models.Spaceship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAllByName", arg0)
	ret0, _ := ret[0].([]models.Spaceship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAllByName indicates an expected call of FilterAllByName.
func (mr *MockSpaceshipRepositoryMockRecorder) FilterAllByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAllByName", reflect.TypeOf((*MockSpaceshipRepository)(nil).FilterAllByName), arg0)
}

// FilterAllByStatus mocks base method.
func (m *MockSpaceshipRepository) FilterAllByStatus(arg0 string) ([]models.Spaceship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAllByStatus", arg0)
	ret0, _ := ret[0].([]models.Spaceship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAllByStatus indicates an expected call of FilterAllByStatus.
func (mr *MockSpaceshipRepositoryMockRecorder) FilterAllByStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAllByStatus", reflect.TypeOf((*MockSpaceshipRepository)(nil).FilterAllByStatus), arg0)
}

// GetAll mocks base method.
func (m *MockSpaceshipRepository) GetAll() (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSpaceshipRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSpaceshipRepository)(nil).GetAll))
}

// GetSingleSpaceship mocks base method.
func (m *MockSpaceshipRepository) GetSingleSpaceship(arg0 int) (*models.Spaceship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleSpaceship", arg0)
	ret0, _ := ret[0].(*models.Spaceship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleSpaceship indicates an expected call of GetSingleSpaceship.
func (mr *MockSpaceshipRepositoryMockRecorder) GetSingleSpaceship(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleSpaceship", reflect.TypeOf((*MockSpaceshipRepository)(nil).GetSingleSpaceship), arg0)
}

// UpdateSpaceship mocks base method.
func (m *MockSpaceshipRepository) UpdateSpaceship(arg0 int, arg1 *models.Spaceship) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpaceship", arg0, arg1)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpaceship indicates an expected call of UpdateSpaceship.
func (mr *MockSpaceshipRepositoryMockRecorder) UpdateSpaceship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpaceship", reflect.TypeOf((*MockSpaceshipRepository)(nil).UpdateSpaceship), arg0, arg1)
}
